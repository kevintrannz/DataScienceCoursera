for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
colnames(output) <- c(colnames(df3), colnames(df4))
colnames(output)
ncol(output)
nrows(output)
nrow(output)
ncol(data.frame(output))
nrow(data.frame(output))
output <- data.frame()
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = c(colnames(df3), colnames(df4))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = list(c(colnames(df3), colnames(df4)))))
list(c(colnames(df3), colnames(df4)))
as.list(c(colnames(df3), colnames(df4)))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = 7,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
as.list(c(colnames(df3), colnames(df4)))
(ncol(df4) + ncol(df3))
output <- as.data.frame(
matrix(nrow = 0, dim = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
colnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, nm)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(NULL, 1)))
output <- as.data.frame(
matrix(nrow = 7, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
as.matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
?matrix
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
(ncol(df4) + ncol(df3))
as.list(c(colnames(df3), colnames(df4)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(1, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list([1, 1])))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(,c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
output2
colnames(output2) <- as.list(c(colnames(df3), colnames(df4)))
colnames
data.matrix(colnames)
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
colnames
colnames
df1 <- structure(list(Assay = c("ATG_AR_trans_up","NVS_PXR_cis","BSK_VCAM1_up"), p.value = c(0.01,0.05,0.0001)), .Names = c("Assay", "p.value"),row.names = c(NA, 3L), class = "data.frame")
df2 <- structure(list(GeneID = c("AR", "VACM1", "TR", "ER", "PXR"), Assay1= c("ATG_ARE_cis", "BSK_hEDG_VCAM1", "NVS_TR_tran", "ATG_ER_UP", "NVS_PXRE_UP"), Assay2= c("ATG_AR_trans_up", "BSK_BE3K_VCAM1", "NA", "ATG_ERE_cis", "ATG_PXRE_cis"), Assay3= c("NVS_AR_trans", "BSK_VCAM1_UP", "NA", "NVS_ERa_CIS", "NVS_PXR_cis"), Assay4= c("Tox21_AR_ARE","NA", "NA", "Tox21_ERaERb_lig", "NA")),  .Names = c("GeneID", "Assay1", "Assay2", "Assay3", "Assay4"),row.names = c(NA, 5L), class = "data.frame")
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- rbind(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
data.matrix(output)
output
as.data.matrix(output)
as.data.matrix(output)
data.matrix(output)
output
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
data.frame(output)
?itemFrequencyPlot
??itemFrequencyPlot
?itemFrequencyPlot
install.packages("arules")
?itemFrequencyPlot
install.packages("itemFrequencyPlot")
itemFrequencyPlot()
itemFrequencyPlot
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
df
as.matrix(df)
itemFrequencyPlot(df)
library(arules)
itemFrequencyPlot(df)
itemFrequencyPlot(as.matrix(df)
)
?itemFrequencyPlot
itemFrequencyPlot(df, type=c("relative", "absolute"))
itemFrequencyPlot(as.matrix(df), type=c("relative", "absolute"))
itemFrequencyPlot(df)
?itemFrequencyPlot
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL))
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL, ...))
data("Adult")
itemFrequencyPlot(Adult)
typeof(adult)
typeof(Adult)
itemFrequencyPlot(data.matrix(df3))
itemFrequencyPlot(data.matrix(Adult))
itemFrequencyPlot(data.matrix(output))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 1/")
read.csv("getdata-data-ss06hid.csv")
data <- read.csv("getdata-data-ss06hid.csv")
typeof(data)
data$VAL
data$VAL[, 1]
data$VAL[1]
count <- 0
for(i in 1:length(data)) {
if(data$VAL[i] == 24) {
count++;
}
length(data$VAL)
count <- 0
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count++
}
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count+= 1
}
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count += 1
}
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) count += 1
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) count = count + 1
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
if(data$VAL[2] == 24) {
}
data$VAL[2] == 24
data$val[1]
data$val[3]
data$VAL[3]
data$VAL[1]
data$VAL[2]
for(i in 1:50) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
for(i in 1:length(data$VAL) {
}
for(i in 1:length(data$VAL)) {
}
for(i in 1:length(data$VAL)) {
if(data$VAL[i] = 24) {
}
}
for(i in 1:length(data$VAL)) {
if(data[i] = 24) {
}
}
for(i in 1:length(data$VAL)) {
count = count + 1
}
count
count <- 0
count
for(i in 1:length) {
if(data$VAL[i])
count = count + 1
}
nrow(data)
for(i in 1:nrow(data$VAL)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
nrow(data$VAL)
nrow(data)
for(i in 1:nrow(data)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
data$val[1]
data$VAL[1]
data$VAL[2]
data$VAL[3]
data$VAL[4]
data$VAL[5]
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
count <- 0
for(i in 1:nrow(data)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
data[data == ""] <- NA
count <- 0
data
for(i in 1:nrow(data)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
data$VAL[data == NA] <- 0
data[data == NA] <- 0
data$VAL
for(i in 1:nrow(data)) {
if(data$VAL[i] == 24) {
}
count = count + 1
}
data <- as.data.frame(data)
na.omit(data$VAL)
count <- 0
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
data$VAL
data <- as.data.frame(data)
na.omit(data$VAL)
data <- as.data.frame(data)
data$VAL <- na.omit(data$VAL)
data <- na.omit(data$VAL)
data$VAL
data
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
data <- as.data.frame(data)
data$VAL <- na.omit(data$VAL)
data$VAL
data <- na.omit(data)
for(i in 1:length(data$VAL)) {
if(data$VAL[i] == 24) {
count = count + 1
}
}
data$VAL
data$VAL
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
data[data$VAL == 24]
data <- as.data.frame(data)
data[data$VAL == 24]
data[data$VAL = 24]
data[VAL(a) = 24]
data[VAL(a) == 24]
data[names(VAL) == 24]
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
data2 <- table(VAL)
data2 <- table(data)
data2 <- table(data)
data2 <- data$VAL[VAL==24]
?lapply
data <- read.csv("getdata-data-ss06hid.csv", na.strings = "NA")
wt <- data.frame(lineNum = 1:length(data$VAL))
wt$count <- sapply(words, function(x) sum(str_count(x, 24)))
data2 <- data$VAL
wt <- data.frame(lineNum = 1:length(data$VAL))
wt$count <- sapply(data2, function(x) sum(str_count(x, 24)))
data$VAL[1 == 24]
data$VAL[ == 24]
wt$count <- sapply(data2, function(x) (x[24]))
wt$count
nrow(wt$count)
data$VAL
data2 <- length(which(data$VAL = 24))
data2 <- length(which(data$VAL == 24))
data2
data$FES
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
library(xlsx)
install.packages(xlsx)
install.packages(xlsx)
library(xlsx)
install.packages('rJava')
install.packages('xlsx')
library(xlsx)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, header=TRUE)
data[, 1]
data[1, ]
data[1]
data[1,]
data[, 1]
dat <- data[18:23, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInteral=TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
rootNode[[1]]
rootNode[[1]]
rootNode[[1][[1]]]
rootNode[[[1]] [[1]]]
rootNode[[[1]][[1]]]
rootNode[[[1]],[[1]]]
rootNode[[1][1]]
rootNode[[1][1]]
xmlName(rootNode)
xpathSapply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode=21231", xmlValue)
xpathSApply(rootNode, "//zipcode='21231'", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
test <- xpathSApply(rootNode, "//zipcode", xmlValue)
test
length <- length(which(test == 21231))
length
data <- read.csv("sm_subcribers-list.csv")
?fread
library('data.table')
install.packages("data.table")
library(data.table)
library(data.table)
DT <- fread('sm_subcribers-list.csv')
DT
DT <- fread('sm_subcribers-list.csv')
DT <- fread('sm_subcribers-list.csv', sep = ",", header= TRUE)
DT
DT
typeof(dt)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
dt <- fread('sm_subcribers-list.csv', sep = ",", header= TRUE)
dt
data.frame(dt)
dt2 <- read.csv("sm_subcribers-list.csv")
dt2
dt <- fread('getdata-data-ss06pid (1).csv', sep = ",", header= TRUE)
dt
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
dt$pwgtp15
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
dt[2,]
dt[,list(mean(x))]
dt[,mean(pwgtp15),by=SEX]
dat <- data[7:15, 18:23]
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- data[7:15, 18:23]
dat <- data[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, header=TRUE)
dat <- data[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- data[7:15, 18:23]
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
7:15
18:23
dat <- data[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- data[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=0, header=TRUE)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=2, header=TRUE)
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetName = "NGAP Sample Data")
dat <- data[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
rowIndex = 18 : 23
colIndex = 7 : 15
dat <- read.xlsx("~$getdata-data-DATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = rowIndex,
colIndex = colIndex, header = TRUE)
rowIndex = 18 : 23
colIndex = 7 : 15
dat <- read.xlsx("$getdata-data-DATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = rowIndex,
colIndex = colIndex, header = TRUE)
dat <- read.xlsx("$getdata-data-DATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = rowIndex, colIndex = colIndex, header = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/gas.xlsx", method = "curl")
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = "./data/gas.xlsx", method = "curl")
dateDownloaded <- date()
library(xlsx)
rowIndex = 18 : 23
colIndex = 7 : 15
dat <- read.xlsx("./data/gas.xlsx", sheetIndex = 1, rowIndex = rowIndex,
colIndex = colIndex, header = TRUE)
rowIndex = 18 : 23
colIndex = 7 : 15
data <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = rowIndex, colIndex = colIndex, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
