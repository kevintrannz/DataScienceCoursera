for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output2) <- c("Assay", "p.value", "GeneID", string)
string
c(string)
test <- c("test", string)
test
colnames(output2) <- paste("Assay", "p.value", "GeneID", string)
test <- paste("test", string)
test
test <- cbind("test", string)
test
test <- c("test", string)
test
data.frame(test)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output2) <- c("Assay", "p.value", "GeneID", string)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output) <- c("Assay", "p.value", "GeneID", string)
output
output <- data.frame(1:4)
output
output <- data.frame(,1:4)
output <- data.frame(1:4, )
colnames(df3)
c(colnames(df3), colnames(df4))
output <- data.frame(c(colnames(df3), colnames(df4)))
output
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
colnames(output) <- c(colnames(df3), colnames(df4))
colnames(output)
ncol(output)
nrows(output)
nrow(output)
ncol(data.frame(output))
nrow(data.frame(output))
output <- data.frame()
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = c(colnames(df3), colnames(df4))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = list(c(colnames(df3), colnames(df4)))))
list(c(colnames(df3), colnames(df4)))
as.list(c(colnames(df3), colnames(df4)))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = 7,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
as.list(c(colnames(df3), colnames(df4)))
(ncol(df4) + ncol(df3))
output <- as.data.frame(
matrix(nrow = 0, dim = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
colnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, nm)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(NULL, 1)))
output <- as.data.frame(
matrix(nrow = 7, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
as.matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
?matrix
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
(ncol(df4) + ncol(df3))
as.list(c(colnames(df3), colnames(df4)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(1, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list([1, 1])))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(,c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
output2
colnames(output2) <- as.list(c(colnames(df3), colnames(df4)))
colnames
data.matrix(colnames)
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
colnames
colnames
df1 <- structure(list(Assay = c("ATG_AR_trans_up","NVS_PXR_cis","BSK_VCAM1_up"), p.value = c(0.01,0.05,0.0001)), .Names = c("Assay", "p.value"),row.names = c(NA, 3L), class = "data.frame")
df2 <- structure(list(GeneID = c("AR", "VACM1", "TR", "ER", "PXR"), Assay1= c("ATG_ARE_cis", "BSK_hEDG_VCAM1", "NVS_TR_tran", "ATG_ER_UP", "NVS_PXRE_UP"), Assay2= c("ATG_AR_trans_up", "BSK_BE3K_VCAM1", "NA", "ATG_ERE_cis", "ATG_PXRE_cis"), Assay3= c("NVS_AR_trans", "BSK_VCAM1_UP", "NA", "NVS_ERa_CIS", "NVS_PXR_cis"), Assay4= c("Tox21_AR_ARE","NA", "NA", "Tox21_ERaERb_lig", "NA")),  .Names = c("GeneID", "Assay1", "Assay2", "Assay3", "Assay4"),row.names = c(NA, 5L), class = "data.frame")
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- rbind(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
data.matrix(output)
output
as.data.matrix(output)
as.data.matrix(output)
data.matrix(output)
output
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
data.frame(output)
?itemFrequencyPlot
??itemFrequencyPlot
?itemFrequencyPlot
install.packages("arules")
?itemFrequencyPlot
install.packages("itemFrequencyPlot")
itemFrequencyPlot()
itemFrequencyPlot
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
df
as.matrix(df)
itemFrequencyPlot(df)
library(arules)
itemFrequencyPlot(df)
itemFrequencyPlot(as.matrix(df)
)
?itemFrequencyPlot
itemFrequencyPlot(df, type=c("relative", "absolute"))
itemFrequencyPlot(as.matrix(df), type=c("relative", "absolute"))
itemFrequencyPlot(df)
?itemFrequencyPlot
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL))
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL, ...))
data("Adult")
itemFrequencyPlot(Adult)
typeof(adult)
typeof(Adult)
itemFrequencyPlot(data.matrix(df3))
itemFrequencyPlot(data.matrix(Adult))
itemFrequencyPlot(data.matrix(output))
swirl()
library(swirl)
swirl()
read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dpllyr")
package_Version("dpllyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
exit()
exit
quit()
library(swirl)
swirl()
swirl()
bye()
swirl()
Sys.getlocale("LC_TIME").
Sys.getlocale("LC_TIME")
Sys.setlocale(category = "LC_ALL", locale = "english")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now(0)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
update(this_moment, now
)
now()
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
departure <- departure + hours(15) + minutes(50)
arive <- departure + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_kong")
with_tz(arrive, "Asia/Hong_kong")
arrive <- with_tz(arrive, "Asia/Hong_kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Quiz/")
library(xlsx)
data <- read.csv("getdata-data-ss06hid.csv", header = TRUE)
agricultureLogical <- data[(data$ACR == 3 && data$AGS == 6)]
agricultureLogical
data.frame(agricultureLogical)
agricultureLogical <- data[(data$ACR == 3 && data$AGS == 6),]
data.frame(agricultureLogical)
which(agricultureLogical)
agricultureLogical <- which(with(data, data$ACR == 3 && data$AGS == 6))
which(agricultureLogical)
agricultureLogical
agricultureLogical <- which(with(data, data$ACR == 3 && data$AGS == 6))
agricultureLogical <- which( data$ACR == 3 && data$AGS == 6)
which(agricultureLogical)
agricultureLogical
agricultureLogical <- data$ACR == 3 && data$AGS == 6
agricultureLogica
agricultureLogical
agricultureLogical <- data$ACR == 3 & data$AGS == 6
agricultureLogical
which(agricultureLogical)
jeff <- jpeg(filename = "getdata-jeff.jpg", native=TRUE)
jeff <- jpeg(filename = "getdata-jeff.jpg")
jeff
library(readJPEG)
install.packages("readJPEG")
library(readJPEG)
install.packages("jpeg")
library(jpeg)
jeff <- readJPEG(filename = "getdata-jeff.jpg",  native=TRUE)
jeff <- readJPEG("getdata-jeff.jpg",  native=TRUE)
jeff <- readJPEG(source = "getdata-jeff.jpg",  native=TRUE)
jeff <- readJPEG(source = "getdata-jeff.jpg",  native=TRUE)
jeff <- readJPEG(system.file("img", "getdata-jeff.jpg", package="jpeg"),  native=TRUE)
jeff <- readJPEG(system.file("img", "getdata-jeff.jpg", package="jpeg"))
jeff <- readJPEG(system.file("img", "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package="jpeg"),  native=TRUE)
file.info("getdata-jeff.jpg")
jeff <- readJPEG(system.file("img", "getdata-jeff (1).jpg", package="jpeg"),  native=TRUE)
file.info("getdata-jeff.jpg")
jeff <- readJPEG(system.file("img", "getdata-jeff (1).jpg", package="jpeg"),  native=TRUE)
file.info("getdata-jeff.jpg")
jeff <- readJPEG("getdata-jeff (1).jpg",  native=TRUE)
jeff
quantile(jeff, c(jeff[, 30], jeff[, 80]))
quantile(jeff, c(jeff[ 30,], jeff[ 80,]))
jeff
jeff[1, ]
jeff[1 ]
quantile(jeff, c(jeff[30], jeff[80]))
quantile(jeff, c(30, 80))
quantile(jeff, c(0.30, 0.80))
data <- read.csv("getdata-data-GDP.csv", header = TRUE)
nrow(data)
data
head(data)
("getdata-data-EDSTATS_Country.csv", header = TRUE)
data2 <- read.csv("getdata-data-EDSTATS_Country.csv", header = TRUE)
head(data)
head(data2)
library(dplyr)
test <- inner_join(data, data2)
data
head(data)
colnames(data)
test <- inner_join(data$X, data2$CountryCode)
data <- read.csv("getdata-data-GDP.csv", header = TRUE)
data
data$X.2
test <- inner_join(data, data2, by = "CountryCode)
test <- inner_join(data, data2, by = "CountryCode")
test <- inner_join(data, data2, by = "CountryCode")
data %>%
mutate(X.2 = CountryCode)
data %>%
mutate(X.2 == CountryCode)
data %>%
setNames(X.2 == CountryCode)
data %>%
setNames(X.2 == CountryCode)
data %>%
setNames(x.2 == CountryCode)
data %>%
setNames(X.2, "CountryCode")
data %>%
mutate(X.2 = "CountryCode")
data[2]
colnames(data)[2]
colnames(data)[3]
colnames(data)[4]
data <- data %>%
colnames()[4] <- "CountryCode"
data <- data %>%
(colnames()[4] <- "CountryCode")
data <- data %>%
(colnames()[4] = "CountryCode")
data <- data %>%
colnames()[4] = "CountryCode"
colnames(data)[4] <- "CountryCode"
data$CountryCode
test <- inner_join(data, data2, by = "CountryCode")
test
test$CountryCode
install.packages("countrycode")
library(countrycode)
data[, 4]
data[, 4] <- countrycode(data[, 4], "iso2c", "country.name")
data[, 4]
data <- read.csv("getdata-data-GDP.csv", header = TRUE)
colnames(data)[4] <- "CountryCode"
data[, 4]
data2$CountryCode <- countrycode(data2$CountryCode, "iso2c", "country.name")
data2$CountryCode
data <- read.csv("getdata-data-GDP.csv", header = TRUE)
data2 <- read.csv("getdata-data-EDSTATS_Country.csv", header = TRUE)
colnames(data)[4] <- "CountryCode"
data2$CountryCode
data$CountryCode <- countrycode(data2$CountryCode, "country.name", "iso2c")
data$CountryCode
test <- inner_join(data, data2, by = "CountryCode")
test$CountryCode
test
as.data.frame(test)
library(data.table)
direccion3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
archivo3 <- "GDP.csv"
download.file(direccion3, archivo3, method="curl")
GDP <- data.table(read.csv("GDP.csv", skip = 4, nrows = 191))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, X.4)]
direccion3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
archivo3 <- "GDP.csv"
download.file(direccion3, archivo3, method="curl")
GDP <- data.table(read.csv("getdata-data-GDP.csv", skip = 4, nrows = 191))
GDP <- GDP[X != ""]
GDP <- GDP[, list(X, X.1, X.3, X.4)]
setnames(GDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "GDP"))
direccion4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
archivo4 <- "EDSTATS_Country.csv"
download.file(direccion4, archivo4, method="curl")
EDSTATS <- data.table(read.csv("EDSTATS_Country.csv"))
EDSTATS <- data.table(read.csv("getdata-data-EDSTATS_Country.csv"))
data2 <- merge(GDP, EDSTATS, all = TRUE, by = c("CountryCode"))
sum(!is.na(unique(data2$rankingGDP)))
data2[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
breaks <- quantile(data2$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
data2$quantileGDP <- cut(data2$rankingGDP, breaks = breaks)
data2[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
data2[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
data2[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(data2$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
data2$quantileGDP <- cut(data2$rankingGDP, breaks = breaks)
data2[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
which(agricultureLogical)
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Quiz/")
data <- read.csv("getdata-data-ss06hid.csv", header = TRUE)
agricultureLogical <- data$ACR == 3 & data$AGS == 6
which(agricultureLogical)
which(agricultureLogical)
jeff <- readJPEG("getdata-jeff (1).jpg",  native=TRUE)
quantile(jeff, c(0.30, 0.80))
data2[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, GDP)][13]
sum(!is.na(unique(data2$rankingGDP)))
data2[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(data2$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
data2$quantileGDP <- cut(data2$rankingGDP, breaks = breaks)
data2[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
##optional step 0: set work directory.
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Project/")
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
dim(trainData) # 7352*561
head(trainData)
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainSubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
table(trainLabel)
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
dim(testData) # 2947*561
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
table(testLabel)
testSubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
joinData <- rbind(trainData, testData)
dim(joinData) # 10299*561
joinLabel <- rbind(trainLabel, testLabel)
dim(joinLabel) # 10299*1
joinSubject <- rbind(trainSubject, testSubject)
dim(joinSubject) # 10299*1
head(trainDate)
head(trainData)
head(testData)
