for(i in 1:(ncol(df4))) {
test <- append(test, "Assay" + values[i])
}
for(i in 1:(ncol(df4))) {
test <- append(test, "Assay" + index)
}
for(i in 1:(ncol(df4))) {
test <- append(test, "Assay" + i)
}
for(i in 1:(ncol(df4))) {
test <- append(test, "Assay")
}
test
df4
for(i in 2:(ncol(df4))) {
test <- append(test, "Assay" + i)
}
for(i in 2:(ncol(df4))) {
test <- append(test, "Assay" + as.character(i))
}
hallo <- vector()
for(i in 2:(ncol(df4))) {
hallo <- append(hallo, i)
}
hallo
for(i in 2:(ncol(df4))) {
test <- append(test, "Assay", i)
}
test
test <- vector()
for(i in 2:(ncol(df4))) {
test <- append(test, c("Assay", i))
}
test
data.frame(test)
for(i in 2:(ncol(df4))) {
test <- append(test, cbind("Assay", i))
}
test
test <- vector()
for(i in 2:(ncol(df4))) {
test <- append(test, paste("Assay", i))
}
test
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output2) <- c("Assay", "p.value", "GeneID", string)
string
c(string)
test <- c("test", string)
test
colnames(output2) <- paste("Assay", "p.value", "GeneID", string)
test <- paste("test", string)
test
test <- cbind("test", string)
test
test <- c("test", string)
test
data.frame(test)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output2) <- c("Assay", "p.value", "GeneID", string)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output) <- c("Assay", "p.value", "GeneID", string)
output
output <- data.frame(1:4)
output
output <- data.frame(,1:4)
output <- data.frame(1:4, )
colnames(df3)
c(colnames(df3), colnames(df4))
output <- data.frame(c(colnames(df3), colnames(df4)))
output
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
colnames(output) <- c(colnames(df3), colnames(df4))
colnames(output)
ncol(output)
nrows(output)
nrow(output)
ncol(data.frame(output))
nrow(data.frame(output))
output <- data.frame()
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = c(colnames(df3), colnames(df4))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = list(c(colnames(df3), colnames(df4)))))
list(c(colnames(df3), colnames(df4)))
as.list(c(colnames(df3), colnames(df4)))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = 7,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
as.list(c(colnames(df3), colnames(df4)))
(ncol(df4) + ncol(df3))
output <- as.data.frame(
matrix(nrow = 0, dim = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
colnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, nm)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(NULL, 1)))
output <- as.data.frame(
matrix(nrow = 7, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
as.matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
?matrix
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
(ncol(df4) + ncol(df3))
as.list(c(colnames(df3), colnames(df4)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(1, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list([1, 1])))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(,c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
output2
colnames(output2) <- as.list(c(colnames(df3), colnames(df4)))
colnames
data.matrix(colnames)
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
colnames
colnames
df1 <- structure(list(Assay = c("ATG_AR_trans_up","NVS_PXR_cis","BSK_VCAM1_up"), p.value = c(0.01,0.05,0.0001)), .Names = c("Assay", "p.value"),row.names = c(NA, 3L), class = "data.frame")
df2 <- structure(list(GeneID = c("AR", "VACM1", "TR", "ER", "PXR"), Assay1= c("ATG_ARE_cis", "BSK_hEDG_VCAM1", "NVS_TR_tran", "ATG_ER_UP", "NVS_PXRE_UP"), Assay2= c("ATG_AR_trans_up", "BSK_BE3K_VCAM1", "NA", "ATG_ERE_cis", "ATG_PXRE_cis"), Assay3= c("NVS_AR_trans", "BSK_VCAM1_UP", "NA", "NVS_ERa_CIS", "NVS_PXR_cis"), Assay4= c("Tox21_AR_ARE","NA", "NA", "Tox21_ERaERb_lig", "NA")),  .Names = c("GeneID", "Assay1", "Assay2", "Assay3", "Assay4"),row.names = c(NA, 5L), class = "data.frame")
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- rbind(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
data.matrix(output)
output
as.data.matrix(output)
as.data.matrix(output)
data.matrix(output)
output
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
data.frame(output)
?itemFrequencyPlot
??itemFrequencyPlot
?itemFrequencyPlot
install.packages("arules")
?itemFrequencyPlot
install.packages("itemFrequencyPlot")
itemFrequencyPlot()
itemFrequencyPlot
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
df
as.matrix(df)
itemFrequencyPlot(df)
library(arules)
itemFrequencyPlot(df)
itemFrequencyPlot(as.matrix(df)
)
?itemFrequencyPlot
itemFrequencyPlot(df, type=c("relative", "absolute"))
itemFrequencyPlot(as.matrix(df), type=c("relative", "absolute"))
itemFrequencyPlot(df)
?itemFrequencyPlot
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL))
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL, ...))
data("Adult")
itemFrequencyPlot(Adult)
typeof(adult)
typeof(Adult)
itemFrequencyPlot(data.matrix(df3))
itemFrequencyPlot(data.matrix(Adult))
itemFrequencyPlot(data.matrix(output))
swirl()
library(swirl)
swirl()
read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dpllyr")
package_Version("dpllyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
exit()
exit
quit()
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Project/")
##Step1: Merges the training and the test sets to create one data set.
trainData <- read.table("./UCI HAR Dataset/train/X_train.txt")
dim(trainData) # 7352*561
head(trainData)
trainLabel <- read.table("./UCI HAR Dataset/train/y_train.txt")
table(trainLabel)
trainSubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
testData <- read.table("./UCI HAR Dataset/test/X_test.txt")
dim(testData) # 2947*561
testLabel <- read.table("./UCI HAR Dataset/test/y_test.txt")
table(testLabel)
testSubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
joinData <- rbind(trainData, testData)
dim(joinData) # 10299*561
joinLabel <- rbind(trainLabel, testLabel)
dim(joinLabel) # 10299*1
joinSubject <- rbind(trainSubject, testSubject)
dim(joinSubject) # 10299*1
joinSubject
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Project/")
##Step1: Merges the training and the test sets to create one data set.
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
##create x data set
x_data <- rbind(x_train, x_test)
##create y data set
y_data <- rbind(y_train, y_test)
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Project/")
##Step1: Merges the training and the test sets to create one data set.
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
##create x data set
x_data <- rbind(x_train, x_test)
##create y data set
y_data <- rbind(y_train, y_test)
##create subject data set
subject_data <- rbind(subject_train, subject_test)
head(y_data)
head(x_data)
head(subject_data)
head(subject_data)
nrow(subject_data)
nrow(x_data)
nrow(y_data)
x_data
head(x_data)
features
features <- read.table("UCI HAR Dataset/features.txt")
features
grep("-(mean|std)\\(\\)", features[, 2])
head(features)
features
as.data.frame(features)
mean_and_std_features <- grep("-(mean|std)\\(\\)", features[, 2])
x_data <- x_data[, mean_and_std_features]
features[mean_and_std_features, 2]
features[mean_and_std_features, 1]
names(x_data) <- features[mean_and_std_features, 2]
feature_names <- read.table("UCI HAR Dataset/activity_labels.txt")
feature_names
y_data
ncol(y_data)
ncol(x_data)
nrow(x_data)
feature_names
head(x_data)
head(subject_data)
feature_names
ncol(subject_data)
nrow(subject_data)
y_data
y_data[, 1]
head(as.data.frame(y_data))
head(as.data.frame(y_data[, 1]))
head(as.data.frame(y_data[, 2]))
head(as.data.frame(activities[y_data[, 2], 2]))
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
head(as.data.frame(activity_labels[y_data[, 2], 2]))
y_data[, 1] <- activity_labels[y_data[, 1], 2]
activity_labels[y_data[, 1], 2]
y_data[, 1]
##optional step 0: set work directory.
setwd("C:/DataScienceCoursera/Getting and Cleaning Data/Week 3/Project/")
##Step1: Merges the training and the test sets to create one data set.
x_train <- read.table("UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt")
##create x data set
x_data <- rbind(x_train, x_test)
##create y data set
y_data <- rbind(y_train, y_test)
##create subject data set
subject_data <- rbind(subject_train, subject_test)
##Step 2: Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("UCI HAR Dataset/features.txt")
## get only columns with mean() or std() in their names.
mean_and_std_features <- grep("-(mean|std)\\(\\)", features[, 2])
##Subset desired columns
x_data <- x_data[, mean_and_std_features]
##Change names
names(x_data) <- features[mean_and_std_features, 2]
## Step 3. Uses descriptive activity names to name the activities in the data set
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
# update values with correct activity names
y_data[, 1]
activity_labels[, 2]
y_data[, 1]
y_data[, 1] <- activity_labels[y_data[, 1], 2]
y_data[, 1]
activity_labels[, 2]
names(y_data) <- "activity"
x_data
y_data
subject_data
names(subject_data)
names(subject_data) <- "Subject"
data_all <- cbind(x_data, y_data, subject_data)
head(data_all)
data_all
colnames(data_all_Average)
colnames(data_all)
??ddply
?ddply
library(dplyr)
?ddply
grouped <- group_by(data_all, activity, Subject)
summarise(grouped, mean=mean(value), sd=sd(value))
summarise(grouped, mean=mean(data_all[, 1:66]), sd=sd(data_all[, 1:66]))
warnings()
summarise(grouped, mean=mean(as.double(data_all[, 1:66])), sd=sd(as.double(data_all[, 1:66])))
data_all[, 1]
summarise(grouped, mean=mean(data_all[, 1:66]), sd=sd(value))
?summarise
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each(funs(mean))
test
test[, 1]
test[, 2]
test[, 3]
test[, 4]
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each(funs(mean(1:66)))
test[, 4]
test[, 5]
test[, 6]
test[, 7]
test[, 10]
test[, 1]
test[, 14]
test <- data_all %>%
group_by(activity, Subject) %>%
summarise(funs(mean(1:66)))
test[, 14]
test[, 1]
test[, 2]
test
?summarise_each
summarise_each())
summarise_each()))
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each()))
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each())
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each()
summarise_each(funs)
summarise_each(funs(mean))
test <- data_all %>%
group_by(activity, Subject) %>%
summarise_each(funs(mean))
test
test[1]
test[2]
nrow(test)
averages_data <- ddply(all_data, .(subject, activity), function(x) colMeans(x[, 1:66]))
library(plyr)
averages_data <- ddply(all_data, .(subject, activity), function(x) colMeans(x[, 1:66]))
averages_data <- ddply(data_all, .(subject, activity), function(x) colMeans(x[, 1:66]))
averages_data <- ddply(data_all, .(Subject, activity), function(x) colMeans(x[, 1:66]))
averages_data
nrow(averages_data)
nrow(test)
ncol(test)
ncol(averages_data)
library(dplyr)
write.table(data_AVG, "data_AVG", row.names = FALSE)
data_AVG <- data_all %>%
group_by(activity, Subject) %>%
summarise_each(funs(mean))
write.table(data_AVG, "data_AVG", row.names = FALSE)
write.table(data_AVG, "data_AVG.txt", row.names = FALSE)
?write.table
mean_and_std_features
features[mean_and_std_features, 2]
