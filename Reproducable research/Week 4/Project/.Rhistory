test
test <- c("test", string)
test
data.frame(test)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output2) <- c("Assay", "p.value", "GeneID", string)
output <- data.frame()
string <- vector()
for(i in 2:(ncol(df4))) {
string <- append(string, paste("Assay", i))
}
colnames(output) <- c("Assay", "p.value", "GeneID", string)
output
output <- data.frame(1:4)
output
output <- data.frame(,1:4)
output <- data.frame(1:4, )
colnames(df3)
c(colnames(df3), colnames(df4))
output <- data.frame(c(colnames(df3), colnames(df4)))
output
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
output <- data.frame(c(colnames(df3), colnames(df4)), )
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
colnames(output) <- c(colnames(df3), colnames(df4))
colnames(output)
ncol(output)
nrows(output)
nrow(output)
ncol(data.frame(output))
nrow(data.frame(output))
output <- data.frame()
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = c(colnames(df3), colnames(df4))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = list(c(colnames(df3), colnames(df4)))))
list(c(colnames(df3), colnames(df4)))
as.list(c(colnames(df3), colnames(df4)))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = 7,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
as.list(c(colnames(df3), colnames(df4)))
(ncol(df4) + ncol(df3))
output <- as.data.frame(
matrix(nrow = 0, dim = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
colnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, nm)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 4,
dimnames = list(NULL, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(NULL, 1)))
output <- as.data.frame(
matrix(nrow = 7, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output <- as.data.frame(
as.matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
?matrix
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df4) + ncol(df3)),
dimnames = as.list(c(colnames(df3), colnames(df4)))))
(ncol(df4) + ncol(df3))
as.list(c(colnames(df3), colnames(df4)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list(1, 1)))
d <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = list([1, 1])))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(,c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = 2,
dimnames = as.list(c(colnames(df3), colnames(df4)))))
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
output2
colnames(output2) <- as.list(c(colnames(df3), colnames(df4)))
colnames
data.matrix(colnames)
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
output2 <- as.data.frame(
matrix(nrow = 0, ncol = (ncol(df3) + ncol(df4))))
colnames(output2) <- c(colnames(df3), colnames(df4))
data.matrix(colnames)
colnames
colnames
df1 <- structure(list(Assay = c("ATG_AR_trans_up","NVS_PXR_cis","BSK_VCAM1_up"), p.value = c(0.01,0.05,0.0001)), .Names = c("Assay", "p.value"),row.names = c(NA, 3L), class = "data.frame")
df2 <- structure(list(GeneID = c("AR", "VACM1", "TR", "ER", "PXR"), Assay1= c("ATG_ARE_cis", "BSK_hEDG_VCAM1", "NVS_TR_tran", "ATG_ER_UP", "NVS_PXRE_UP"), Assay2= c("ATG_AR_trans_up", "BSK_BE3K_VCAM1", "NA", "ATG_ERE_cis", "ATG_PXRE_cis"), Assay3= c("NVS_AR_trans", "BSK_VCAM1_UP", "NA", "NVS_ERa_CIS", "NVS_PXR_cis"), Assay4= c("Tox21_AR_ARE","NA", "NA", "Tox21_ERaERb_lig", "NA")),  .Names = c("GeneID", "Assay1", "Assay2", "Assay3", "Assay4"),row.names = c(NA, 5L), class = "data.frame")
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- rbind(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
data.matrix(output)
output
as.data.matrix(output)
as.data.matrix(output)
data.matrix(output)
output
df3 <- as.data.frame(df1)
df4 <- as.data.frame(df2)
output <- data.frame()
for(j in 1:nrow(df3)) {
match <- FALSE
for(i in 2:(ncol(df4))) {
for(p in 1:nrow(df4)) {
if((df3[j, 1] == df4[p, i]) && (match == FALSE)) {
output <- append(output, c(df3[j, ], df4[p, ]))
match <- TRUE
}
}
}
}
output
data.matrix(output)
data.frame(output)
?itemFrequencyPlot
??itemFrequencyPlot
?itemFrequencyPlot
install.packages("arules")
?itemFrequencyPlot
install.packages("itemFrequencyPlot")
itemFrequencyPlot()
itemFrequencyPlot
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
df
as.matrix(df)
itemFrequencyPlot(df)
library(arules)
itemFrequencyPlot(df)
itemFrequencyPlot(as.matrix(df)
)
?itemFrequencyPlot
itemFrequencyPlot(df, type=c("relative", "absolute"))
itemFrequencyPlot(as.matrix(df), type=c("relative", "absolute"))
itemFrequencyPlot(df)
?itemFrequencyPlot
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL))
itemFrequencyPlot((df, type = c("relative", "absolute"),
weighted = FALSE, support = NULL, topN = NULL,
population = NULL, popCol = "black", popLwd = 1,
lift = FALSE, horiz = FALSE,
names = TRUE, cex.names =  graphics::par("cex.axis"),
xlab = NULL, ylab = NULL, mai = NULL, ...))
data("Adult")
itemFrequencyPlot(Adult)
typeof(adult)
typeof(Adult)
itemFrequencyPlot(data.matrix(df3))
itemFrequencyPlot(data.matrix(Adult))
itemFrequencyPlot(data.matrix(output))
swirl()
library(swirl)
swirl()
read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dpllyr")
package_Version("dpllyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
exit()
exit
quit()
library(swirl)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
swirl()
library(swirl)
swirl()
swirl()
0
exit()
bye()
swirl()
barplot(height=aggregatedTotalByYear$sum.Emissions, names.arg=aggregatedTotalByYear$year, xlab="years", ylab=expression('total PM'[2.5]*' emission'),main=expression('Total PM'[2.5]*' emissions at various years'))
qnorm(0.95, 100, 10)
0,5 ^ 5
0.5^5
0.5 * 0.5
0.25 * 0.25
0.0625 * 0.0625
0.00390625 * 0.00390625
1.525879e-05 * 1.525879e-05
2.328307e-10 * 100
ggplot(data=avgInjTop, aes(x=EVTYPE, y=Injuries)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total injuries") +
ggtitle("Injuries By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
head(dataN)
##Load packages
library(dplyr)
library(ggplot2)
##Set wd, load data and check it out
setwd("C:/DataScienceCoursera/Reproducable research/Week 4/Project/")
data <- read.csv("repdata-data-StormData.csv", header = TRUE)
head(data)
##Select only needed columns.
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
## 1. Across the United States, which types of events (as indicated in the EVTYPE variable) are most harmful with respect to population health?
##AvgFata
avgFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
avgFataTop <- avgFata[1:10,]
##avgInj
avgInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
avgInjTop <- avgInj[1:10,]
##Select only needed columns.
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
##Total fatalities
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
head(unique(dataN$PROPDMGEXP))
head(dataN$PROPDMGEXP)
dataN$PROPDMGEXP
unique(dataN$PROPDMGEXP))
unique(dataN$PROPDMGEXP)
test <- unique(dataN$PROPDMGEXP)
as.table(test)
as.data.matrix(test)
as.data.frame(test)
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate_each(funs(toupper))
View(dataN)
##Load packages
library(dplyr)
library(ggplot2)
##Set wd, load data and check it out
setwd("C:/DataScienceCoursera/Reproducable research/Week 4/Project/")
data <- read.csv("repdata-data-StormData.csv", header = TRUE)
head(data)
##Select only needed columns and convert to uppercase
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate_each(funs(toupper))
##Total fatalities
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
##Total property damage
unique(dataN$PROPDMGEXP)
##Total fatalities
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFata <- dataN %>% group_by(EVTYPE)## %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) ##%>% arrange(desc(Fatalities))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate_each(funs(toupper))
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) ##%>% mutate_each(funs(toupper))
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate(PROPDMBEXP, CROPDMBEXP, funs(toupper))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate(PROPDMBEXP, funs(toupper))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate(PROPDMBEXP =  toupper(PROPDMBEXP))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>% mutate(PROPDMGEXP =  toupper(PROPDMGEXP))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG))
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
View(dataN)
multiplyConvertor <- function(value, char) {
multiply <- 1
if(char == "H") {
multiply <- 100
}
else if (char == "K") {
multiply <- 1000
}
else if (char == "M") {
multiply <- 1000000
}
else if (char == "B") {
multiply <- 1000000000
}
View(dataN)
View(dataN)
View(dataN)
head(dataN)
)
multiplyConvertor <- function(value, char) {
multiply <- 1
if(char == "H") {
multiply <- 100
}
else if (char == "K") {
multiply <- 1000
}
else if (char == "M") {
multiply <- 1000000
}
else if (char == "B") {
multiply <- 1000000000
}
return((value * multiply) / 1000000000)
}
View(dataN)
dataN$PROPDMG <- multiplyConvertor(dataN$PROPDMG, dataN$PROPDMGEXP)
dataN$PropDmg <- multiplyConvertor(dataN$PROPDMG, dataN$PROPDMGEXP)
View(dataN)
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG))
dataN$PropDmg <- multiplyConvertor(dataN$PROPDMG, dataN$PROPDMGEXP)
View(dataN)
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG)) %>% rowwise() %>% mutate(Propdmg = multiplyConvertor(PROPDMG, PROPDMGEXP))
View(dataN)
multiplyConvertor <- function(value, char) {
multiply <- 1
if(char == "H") {
multiply <- 100
}
else if (char == "K") {
multiply <- 1000
}
else if (char == "M") {
multiply <- 1000000
}
else if (char == "B") {
multiply <- 1000000000
}
return(value * multiply)
}
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG)) %>% rowwise() %>% mutate(Propdmg = multiplyConvertor(PROPDMG, PROPDMGEXP))
View(dataN)
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmb = multiplyConv(CROPDMG, PROPDMG))
multiplyConv <- function(value, char) {
multiply <- 1
if(char == "H") {
multiply <- 100
}
else if (char == "K") {
multiply <- 1000
}
else if (char == "M") {
multiply <- 1000000
}
else if (char == "B") {
multiply <- 1000000000
}
return(value * multiply)
}
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmb = multiplyConv(CROPDMG, PROPDMG))
dataN <- data %>% select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP) %>%
mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG))
##Calculate the property & crop damage using the 'MultiplyConv' function.
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmb = multiplyConv(CROPDMG, PROPDMG))
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP))
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmg = multiplyConv(CROPDMG, PROPDMG))
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP))
dataN <- dataN %>% rowwise() %>% mutate(CropDmg = multiplyConv(CROPDMG, PROPDMG))
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmg = multiplyConv(CROPDMG, CROPDMGEXP))
dataN[CROPDMB == NA,]
Head(dataN[CROPDMG = NA,])
head(dataN[CROPDMG = NA,])
head(dataN[CROPDMG == NA,])
unique(dataN$CROPDMG)
typeof(dataN$CROPDMG)
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmg = multiplyConv(as.numeric(CROPDMG), CROPDMGEXP))
dataN <- dataN %>% select(EVTYPE, FATALITIES, INJURIES, Propdmg, CropDmg)
head(dataN)
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
##Total Property damage
sumEcoDmg <- dataN %>% summarize(EcoDmg = sum(CropDmg) + sum(Propdmg)) %>% arrange(desc(EcoDmg))
View(sumEcoDmg)
View(sumFata)
sumEcoDmg <- dataN %>% group_by(EVTYPE) %>%  summarize(EcoDmg = sum(CropDmg) + sum(Propdmg)) %>% arrange(desc(EcoDmg))
View(sumEcoDmg)
multiplyConv <- function(value, char) {
multiply <- 1
if(char == "H") {
multiply <- 100
}
else if (char == "K") {
multiply <- 1000
}
else if (char == "M") {
multiply <- 1000000
}
else if (char == "B") {
multiply <- 1000000000
}
return(value * multiply / 1000000000)
}
###The steps below could have been done in just one step. However I felt that made what was happening unclear.
##Select only needed columns and convert the exponential columns to uppercase
dataN <- data %>% mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMG =  toupper(CROPDMG))
##Calculate the property & crop damage using the 'MultiplyConv' function. Then select the needed columns for the calculations.
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmg = multiplyConv(as.numeric(CROPDMG), CROPDMGEXP))
dataN <- dataN %>% select(EVTYPE, FATALITIES, INJURIES, Propdmg, CropDmg)
##Total fatalities
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
##Total economical damage
sumEcoDmg <- dataN %>% group_by(EVTYPE) %>%  summarize(EcoDmg = sum(CropDmg) + sum(Propdmg)) %>% arrange(desc(EcoDmg))
sumEcoTop <- sumEcoDmg[1:10,]
###The steps below could have been done in just one step. However I felt that made what was happening unclear.
##Select only needed columns and convert the exponential columns to uppercase
dataN <- data %>% mutate(PROPDMGEXP =  toupper(PROPDMGEXP), CROPDMGEXP =  toupper(CROPDMGEXP))
##Calculate the property & crop damage using the 'MultiplyConv' function. Then select the needed columns for the calculations.
dataN <- dataN %>% rowwise() %>% mutate(Propdmg = multiplyConv(PROPDMG, PROPDMGEXP), CropDmg = multiplyConv(CROPDMG, CROPDMGEXP))
dataN <- dataN %>% select(EVTYPE, FATALITIES, INJURIES, Propdmg, CropDmg)
##Total fatalities
sumFata <- dataN %>% group_by(EVTYPE) %>% summarize(Fatalities = sum(FATALITIES)) %>% arrange(desc(Fatalities))
sumFataTop <- sumFata[1:10,]
##Total injuries
sumInj <- dataN %>% group_by(EVTYPE) %>% summarize(Injuries = sum(INJURIES)) %>% arrange(desc(Injuries))
sumInjTop <- sumInj[1:10,]
##Total economical damage
sumEcoDmg <- dataN %>% group_by(
)
sumEcoDmg <- dataN %>% group_by(EVTYPE) %>%  summarize(EcoDmg = sum(CropDmg) + sum(Propdmg)) %>% arrange(desc(EcoDmg))
sumEcoTop <- sumEcoDmg[1:10,]
